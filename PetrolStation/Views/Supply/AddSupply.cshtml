
@{
    ViewData["Title"] = "AddSupply";
}

<style>
    * { box-sizing: border-box; }

.do_zamiany{
      display: block;
      width: 100%;
      height: calc(1.5em + 0.75rem + 2px);
      padding: 0.375rem 0.75rem;
      font-size: 1rem;
      font-weight: 400;
      line-height: 1.5;
      color: #495057;
      background-color: #fff;
      background-clip: padding-box;
      border: 1px solid #ced4da;
      border-radius: 0.25rem;
      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

body {
  font: 16px Arial;
}
.autocomplete {
  /*the container must be positioned relative:*/
  position: relative;
  display: inline-block;
}
input {
  border: 1px solid transparent;
  background-color: #f1f1f1;
  padding: 10px;
  font-size: 16px;
}
input[type=text] {
  background-color: #f1f1f1;
  width: 100%;
}
input[type=submit] {
  background-color: DodgerBlue;
  color: #fff;
}
.autocomplete-items {
  position: absolute;
  border: 1px solid #d4d4d4;
  border-bottom: none;
  border-top: none;
  z-index: 99;
  /*position the autocomplete items to be the same width as the container:*/
  top: 100%;
  left: 0;
  right: 0;
}
.autocomplete-items div {
  padding: 10px;
  cursor: pointer;
  background-color: #fff;
  border-bottom: 1px solid #d4d4d4;
}
.autocomplete-items div:hover {
  /*when hovering an item:*/
  background-color: #e9e9e9;
}
.autocomplete-active {
  /*when navigating through the items using the arrow keys:*/
  background-color: DodgerBlue !important;
  color: #ffffff;
}
</style>

<div id="body">
<h1>AddSupply</h1>
<form asp-action="AddSupply" id="form" autocomplete="off">
    <div style='overflow:auto; width:1000px;height:300px;'>
    <table class="table table-striped">
        <tr>
            <th scope="col">Id</th>
            <th scope="col">Product name</th>
            <th scope="col">Quantity in storage</th>
            <th scope="col">Quantity in supply</th>
            <th scope="col">Total quantity</th>
            <th scope="col">Remove</th>
        </tr>
        <tbody id="supply_table">

        </tbody>
    </table>
        </div>
    <br />
    <div class="autocomplete">
    <label>Produkt</label>
    <input id="product_id" />
        <label>Ilość</label>
        <input id="ilosc_dostawy" />
    <input type="button" id="add_product" value="Dodaj produkt" class="btn btn-primary"/>
        </div>
</form>
    </div>

<script>

    class Supply {
        constructor(id, ilosc) {
            this.id = parseInt(id);
            this.ilosc = ilosc;
        }
    }

    let product_button = document.getElementById("add_product")
    let product_input = document.getElementById("product_id");
    let produkty = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Produkty));
    let productList = [];
    var productsAddedToSupply = [];
    for (let i = 0; i < produkty.length; i++) {
        productList.push(produkty[i]);
    }

    var table_for_autofill = [];

    for (let i = 0; i < productList.length; i++) {
        table_for_autofill.push(productList[i].IdProduct + " " + productList[i].Name + " " + productList[i].QuantityInStorage);
    }

    var IdDodanegoProduktu = -1;
    document.getElementById("ilosc_dostawy").value = "1";

    product_button.addEventListener("click", function (e) {
        let product;
        for (let i = 0; i < productList.length; i++) {
            if (productList[i].IdProduct == IdDodanegoProduktu) {
                product = productList[i];
                break;
            }
        }
        
        if (IdDodanegoProduktu != -1 && document.getElementById("product_id").value == product.Name) {
            if (!productsAddedToSupplyContains(product)) {
                createElement(product.IdProduct, product.Name, product.QuantityInStorage, parseInt(document.getElementById("ilosc_dostawy").value));
                productsAddedToSupply.push(new Supply(product.IdProduct, parseInt(document.getElementById("ilosc_dostawy").value) + parseInt(product.QuantityInStorage)));
                IdDodanegoProduktu = -1;
                document.getElementById("ilosc_dostawy").value = "1";
            }
        }
    });



    autocomplete(product_input, table_for_autofill);
    
    function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].toUpperCase().includes(val.toUpperCase())) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
            /*insert a input field that will hold the current array item's value:*/
            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
            b.addEventListener("click", function (e) {
                IdDodanegoProduktu = parseInt(this.getElementsByTagName("input")[0].value.split(" ")[0]);
                /*insert the value for the autocomplete text field:*/
                inp.value = productNameForId(IdDodanegoProduktu);
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
      x[i].parentNode.removeChild(x[i]);
    }
  }
}
/*execute a function when someone clicks in the document:*/
document.addEventListener("click", function (e) {
    closeAllLists(e.target);
});
    }



    function createElement(id, name, storage, supply) {
        let parent = document.getElementById("supply_table");
        let newTr = document.createElement("tr");
        for (let i = 0; i < 3; i++) {
            let newTd = document.createElement("td");
            let tekst = document.createTextNode(arguments[i]);
            newTd.appendChild(tekst);
            newTr.appendChild(newTd);
        }
        let par = document.createElement("p");
        let tekst = document.createTextNode(supply);
        par.appendChild(tekst);
        par.setAttribute('id', id);
        par.setAttribute("class", "par");
        par.setAttribute('onclick', 'createInput(this)');
        let newTd = document.createElement("td");
        newTd.appendChild(par);
        newTr.appendChild(newTd);

        newTd = document.createElement("td");
        newTd.setAttribute('id', "total" + id);
        tekst = document.createTextNode(storage + supply);
        newTd.appendChild(tekst);
        newTr.appendChild(newTd);


        newTd = document.createElement("td");
        let removeButton = document.createElement("input");
        removeButton.type = "button";
        removeButton.setAttribute("class", "btn btn-danger");
        removeButton.value = "Usuń";
        removeButton.onclick = function () {
            document.getElementById("tr" + id).remove();
            for (let i = 0; i < productsAddedToSupply.length; i++) {
                if (productsAddedToSupply[i].id == id) {
                    let remove = productsAddedToSupply.splice(i, 1);
                    document.getElementById("product_id").value = "";
                    break;
                }
            }

        };
        newTd.appendChild(removeButton);
        newTr.appendChild(newTd);

        newTr.setAttribute("id", "tr" + id);
        parent.appendChild(newTr);
    }

    function productsAddedToSupplyContains(product) {
        if (product == null) {
            return true;
        }
        for (let i = 0; i < productsAddedToSupply.length; i++) {
            if (productsAddedToSupply[i].id == product.IdProduct) {
                return true;
            }
        }
        return false;
    }

    function createInput(elem) {
        console.log(elem.textContent)
        let input = document.createElement("input");
        input.type = "number";
        input.setAttribute('min', '0');
        input.style.width = "70px";
        input.value = parseInt(elem.textContent);
        input.setAttribute('id', elem.id);
        input.setAttribute('class', 'do_zamiany');
        elem.parentNode.replaceChild(input, elem);
    };

    document.getElementById("body").onclick = function (ev) {
        if (ev.target.className == "do_zamiany" || ev.target.className == "par") {
            console.log("weszlo")
            return;
        }
        let inputs = document.getElementsByClassName("do_zamiany");
        console.log(inputs);
        for (let i = 0; i < inputs.length; i++) {
            document.getElementById("total" + inputs[i].id).innerHTML = parseInt(inputs[i].value) + liczbaOdId(inputs[i].id);
            let total = parseInt(document.getElementById("total" + inputs[i].id).textContent);
            console.log(inputs[i].id + " " + total);
            productsAddedToSupply[indexDlaId(inputs[i].id)].ilosc = total;
            let paragraf = document.createElement("p")
            let text = document.createTextNode(inputs[i].value);
            paragraf.appendChild(text);
            paragraf.setAttribute('id', inputs[i].id);
            paragraf.setAttribute("class","par");
            paragraf.setAttribute('onclick', 'createInput(this)');
            inputs[i].parentNode.replaceChild(paragraf, inputs[i]);
            //tutaj
        }
    }

    function productNameForId(id) {
        for (let i = 0; i < productList.length; i++) {
            if (productList[i].IdProduct == id) {
                return productList[i].Name;
            }
        }
    }

    function indexDlaId(idproduct) {
        for (let i = 0; i < productList.length; i++) {
            if (productsAddedToSupply[i].id == idproduct) {
                return parseInt(i);
            }
        }
    }

    function liczbaOdId(productid) {
        for (let i = 0; i < productList.length; i++) {
            if (productList[i].IdProduct == productid) {
                return parseInt(productList[i].QuantityInStorage);
            }
        }
    }

</script>
