// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetrolStation.Models;

namespace PetrolStation.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20191103202932_PetrolStationMigration")]
    partial class PetrolStationMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PetrolStation.Models.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<string>("NumberPlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCar");

                    b.HasIndex("IdClient");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("PetrolStation.Models.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdClient");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("PetrolStation.Models.Fuel", b =>
                {
                    b.Property<int>("IdFuel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceForLiter")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdFuel");

                    b.ToTable("Fuel");
                });

            modelBuilder.Entity("PetrolStation.Models.FuelTank", b =>
                {
                    b.Property<int>("IdFuelTank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ActualQuantity")
                        .HasColumnType("real");

                    b.Property<float>("Capacity")
                        .HasColumnType("real");

                    b.Property<int>("IdFuel")
                        .HasColumnType("int");

                    b.HasKey("IdFuelTank");

                    b.HasIndex("IdFuel");

                    b.ToTable("FuelTank");
                });

            modelBuilder.Entity("PetrolStation.Models.Fueling", b =>
                {
                    b.Property<int>("IdFueling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdFuel")
                        .HasColumnType("int");

                    b.Property<int>("IdGasPump")
                        .HasColumnType("int");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("IdFueling");

                    b.HasIndex("IdFuel");

                    b.HasIndex("IdGasPump");

                    b.ToTable("Fueling");
                });

            modelBuilder.Entity("PetrolStation.Models.FuelingList", b =>
                {
                    b.Property<int>("IdFueling")
                        .HasColumnType("int");

                    b.Property<int>("IdTransaction")
                        .HasColumnType("int");

                    b.HasKey("IdFueling");

                    b.HasIndex("IdTransaction");

                    b.ToTable("FuelingList");
                });

            modelBuilder.Entity("PetrolStation.Models.GasPump", b =>
                {
                    b.Property<int>("IdGasPump")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.HasKey("IdGasPump");

                    b.ToTable("GasPump");
                });

            modelBuilder.Entity("PetrolStation.Models.LoyalityCard", b =>
                {
                    b.Property<int>("IdLoyalityCard")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActualPoints")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.HasKey("IdLoyalityCard");

                    b.HasIndex("IdClient");

                    b.ToTable("LoyalityCard");
                });

            modelBuilder.Entity("PetrolStation.Models.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PriceInPoints")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStorage")
                        .HasColumnType("int");

                    b.HasKey("IdProduct");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("PetrolStation.Models.ProductList", b =>
                {
                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdTransaction")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IdProduct", "IdTransaction");

                    b.HasIndex("IdTransaction");

                    b.ToTable("ProductList");
                });

            modelBuilder.Entity("PetrolStation.Models.PumpTank", b =>
                {
                    b.Property<int>("IdGasPump")
                        .HasColumnType("int");

                    b.Property<int>("IdFuelTank")
                        .HasColumnType("int");

                    b.HasKey("IdGasPump", "IdFuelTank");

                    b.HasIndex("IdFuelTank");

                    b.ToTable("PumpTank");
                });

            modelBuilder.Entity("PetrolStation.Models.Transaction", b =>
                {
                    b.Property<int>("IdTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdLoyalityCard")
                        .HasColumnType("int");

                    b.HasKey("IdTransaction");

                    b.HasIndex("IdLoyalityCard");

                    b.ToTable("Transaction");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Transaction");
                });

            modelBuilder.Entity("PetrolStation.Models.TransactionInvoice", b =>
                {
                    b.HasBaseType("PetrolStation.Models.Transaction");

                    b.Property<int?>("IdCar")
                        .HasColumnType("int");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdClient");

                    b.HasDiscriminator().HasValue("TransactionInvoice");
                });

            modelBuilder.Entity("PetrolStation.Models.Car", b =>
                {
                    b.HasOne("PetrolStation.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetrolStation.Models.FuelTank", b =>
                {
                    b.HasOne("PetrolStation.Models.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("IdFuel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetrolStation.Models.Fueling", b =>
                {
                    b.HasOne("PetrolStation.Models.Fuel", "Fuel")
                        .WithMany()
                        .HasForeignKey("IdFuel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetrolStation.Models.GasPump", "GasPump")
                        .WithMany()
                        .HasForeignKey("IdGasPump")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetrolStation.Models.FuelingList", b =>
                {
                    b.HasOne("PetrolStation.Models.Fueling", "Fueling")
                        .WithMany()
                        .HasForeignKey("IdFueling")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetrolStation.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("IdTransaction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetrolStation.Models.LoyalityCard", b =>
                {
                    b.HasOne("PetrolStation.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetrolStation.Models.ProductList", b =>
                {
                    b.HasOne("PetrolStation.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetrolStation.Models.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("IdTransaction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetrolStation.Models.PumpTank", b =>
                {
                    b.HasOne("PetrolStation.Models.FuelTank", "FuelTank")
                        .WithMany()
                        .HasForeignKey("IdFuelTank")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetrolStation.Models.GasPump", "GasPump")
                        .WithMany()
                        .HasForeignKey("IdGasPump")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetrolStation.Models.Transaction", b =>
                {
                    b.HasOne("PetrolStation.Models.LoyalityCard", "LoyalityCard")
                        .WithMany()
                        .HasForeignKey("IdLoyalityCard");
                });

            modelBuilder.Entity("PetrolStation.Models.TransactionInvoice", b =>
                {
                    b.HasOne("PetrolStation.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("IdCar");

                    b.HasOne("PetrolStation.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient");
                });
#pragma warning restore 612, 618
        }
    }
}
