@model List<PetrolStation.Models.ModelePomocnicze.ExtendedTransactionModel>
@using System.Text.RegularExpressions

@{
    ViewData["Title"] = "Index";
}

<style>
    .HeaderSite {
        display: inline-block;
        position: relative;
        height: 100px;
    }

    .DetailsButton {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
        display: inline-block;
        font-weight: 400;
        text-align: center;
        vertical-align: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }
</style>
<div class="HeaderSite">
    <h1 style="position:absolute; margin-top:30px">Transactions</h1>
    <h4 style="position: absolute; margin-top:15px; margin-left:270px; width:300px">Select transaction type</h4>
    <select class="browser-default custom-select custom-select-lg mb-3" id="TypeList" style="position: absolute; margin-top:45px; margin-left:270px; width:250px">
        <option value="Transaction">Receipt</option>
        <option value="Transaction Invoice">Invoice</option>
        <option>All</option>
    </select>
    <h4 style="position: absolute; margin-top:15px; margin-left:570px; width:300px" hidden>Filter by date</h4>
    <input style="position: absolute; margin-top:17px; margin-left:720px; width:30px; height:30px;" type="checkbox" hidden @*class="custom-control-input"*@ />
    <input style="position: absolute; margin-top:45px; margin-left:570px; width:200px" type="date" hidden />
</div>
<table class="table table-hover" id="MainTable">
    <thead>
        <tr>
            <th scope="col"></th>
            <th scope="col">Id transaction</th>
            <th scope="col">Client</th>
            <th scope="col">Transaction date</th>
            <th scope="col">Transaction sum</th>
            <th scope="col">Transaction type</th>
        </tr>
    </thead>
    @foreach (var extendedTransaction in Model)
    {
        string transactionType = "Not assigned - error";
        if (extendedTransaction.IsInvoice)
            transactionType = "Invoice";
        else
            transactionType = "Transaction";
        <tbody class="AlwaysVisible" title="@transactionType">
            <tr>
                <td>
                    <button class="DetailsButton">></button>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => extendedTransaction.Transaction.IdTransaction)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => extendedTransaction.ClientString)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => extendedTransaction.Transaction.Date)
                </td>
                <td>
                    @extendedTransaction.PriceWholeTransaction
                </td>
                <td>
                    @Html.DisplayFor(modelItem => extendedTransaction.TransactionType)
                </td>
            </tr>
        </tbody>
        <tbody class="DetailsInfo" hidden title="@transactionType" width="100%">
            <tr>
                @if (extendedTransaction.Client != null)
                {
                    <td colspan="6">
                        <h4>Client</h4>
                        <table width="100%">
                            <tr>
                                @foreach (var property in extendedTransaction.Client.GetType().GetProperties())
                                {
                                    if (property.GetValue(extendedTransaction.Client) != null)
                                    {
                                        if (property.Name != "NIP")
                                        {
                                            <th scope="col">@Regex.Replace(property.Name, "(\\B[A-Z])", " $1")</th>
                                        }
                                        else
                                        {
                                            <th scope="col">@property.Name</th>
                                        }
                                    }
                                }
                            </tr>
                            <tr>
                                @foreach (var property in extendedTransaction.Client.GetType().GetProperties())
                                {
                                    if (property.GetValue(extendedTransaction.Client) != null)
                                    {
                                        <td>@property.GetValue(extendedTransaction.Client)</td>
                                    }
                                }
                            </tr>
                        </table>
                    </td>
                }
            </tr>
            <tr>
                @*Fueling list*@
                @if (extendedTransaction.FuelingList.Count > 0)
                {
                    <td colspan="6">
                        <h4>Fueling list</h4>
                        <table width="100%">
                            <tr>
                                <th scope="col">Id fueling</th>
                                <th scope="col">Id gas pump</th>
                                <th scope="col">Fuel name</th>
                                <th scope="col">Price per liter</th>
                                <th scope="col">Fuel quantity</th>
                                <th scope="col">Price total</th>
                            </tr>
                            @foreach (var fueling in extendedTransaction.FuelingList)
                            {
                                //Zastanowic sie czy tak chcemy zaokraglac
                                decimal priceTotal = Math.Round(fueling.Fueling.Fuel.PriceForLiter * (decimal)(fueling.Fueling.Quantity), 2);
                                <tr @*hidden*@>
                                    <td>
                                        @Html.DisplayFor(modelItem => fueling.IdFueling)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => fueling.Fueling.IdGasPump)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => fueling.Fueling.Fuel.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => fueling.Fueling.Fuel.PriceForLiter)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => fueling.Fueling.Quantity)
                                    </td>
                                    <td>
                                        @priceTotal
                                    </td>
                                </tr>
                            }
                        </table>
                    </td>
                }
            </tr>
            <tr>
                @*Product list*@
                @if (extendedTransaction.PurchasedProducts.Count > 0)
                {
                    <td colspan="6">
                        <h4>Products list</h4>
                        <table width="100%">
                            <tr>
                                <th scope="col">Id product</th>
                                <th scope="col">Name</th>
                                <th scope="col">Price per unit</th>
                                <th scope="col">Quantity</th>
                                <th scope="col">Price sum</th>
                            </tr>
                            @foreach (var product in extendedTransaction.PurchasedProducts)
                            {
                                decimal priceSum = product.Quantity * product.Product.Price;
                                <tr @*hidden*@>
                                    <td>
                                        @Html.DisplayFor(modelItem => product.IdProduct)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => product.Product.Name)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => product.Product.Price)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => product.Quantity)
                                    </td>
                                    <td>
                                        @priceSum
                                    </td>
                                </tr>
                            }
                        </table>
                    </td>
                }
            </tr>
            <tr>
                @if (extendedTransaction.LoyalityCard != null)
                {
                    <td colspan="6">
                        <h4>Used loyality card</h4>
                        <table width="100%">
                            <tr>
                                <th scope="col">Card ID</th>
                                <th scope="col">Points on card</th>
                                <th scope="col">Owner ID</th>
                                @foreach (var property in extendedTransaction.LoyalityCard.Client.GetType().GetProperties())
                                {
                                    if (property.GetValue(extendedTransaction.LoyalityCard.Client) != null)
                                    {
                                        if (property.Name != "IdClient")
                                        {
                                            if (property.Name != "NIP")
                                            {
                                                <th scope="col">@Regex.Replace(property.Name, "(\\B[A-Z])", " $1")</th>
                                            }
                                            else
                                            {
                                                <th scope="col">@property.Name</th>
                                            }
                                        }
                                    }
                                }
                            </tr>
                            <tr>
                                <td @*hidden*@>
                                    @Html.DisplayFor(modelItem => extendedTransaction.LoyalityCard.IdLoyalityCard)
                                </td>
                                <td @*hidden*@>
                                    @Html.DisplayFor(modelItem => extendedTransaction.LoyalityCard.ActualPoints)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => extendedTransaction.LoyalityCardOwner.IdClient)
                                </td>
                                @foreach (var property in extendedTransaction.LoyalityCardOwner.GetType().GetProperties())
                                {
                                    if (property.GetValue(extendedTransaction.LoyalityCardOwner) != null)
                                    {
                                        if (property.Name != "IdClient")
                                        {
                                            <td scope="col">@property.GetValue(extendedTransaction.LoyalityCardOwner)</td>
                                        }
                                    }
                                }
                            </tr>
                        </table>
                    </td>
                }
            </tr>
            <tr>
                @if (extendedTransaction.Car != null)
                {
                    <td colspan="6">
                        <h4>Used car</h4>
                        <table width="100%">
                            <tr>
                                @foreach (var property in extendedTransaction.Car.GetType().GetProperties())
                                {
                                    if (property.GetValue(extendedTransaction.Car) != null)
                                    {
                                        if (property.Name != "Client")
                                        {
                                            if (property.Name != "NIP")
                                            {
                                                <th scope="col">@Regex.Replace(property.Name, "(\\B[A-Z])", " $1")</th>
                                            }
                                            else
                                            {
                                                <th scope="col">@property.Name</th>
                                            }
                                        }
                                    }
                                }
                            </tr>
                            <tr>
                                @foreach (var property in extendedTransaction.Car.GetType().GetProperties())
                                {
                                    if (property.GetValue(extendedTransaction.Car) != null)
                                    {
                                        if (property.Name != "Client")
                                        {
                                            <td>@property.GetValue(extendedTransaction.Car)</td>
                                        }
                                    }
                                }
                            </tr>
                        </table>
                    </td>
                }
            </tr>
        </tbody>
    }
</table>
@* @Scripts.Render("~/bundles/bootstrap") *@
@* Render the Bootstrap bundle here if you took it out of the main layout *@
<script src="https://cdn.jsdelivr.net/npm/gijgo@1.9.6/js/gijgo.min.js" type="text/javascript"></script>
<script>
    $('#RequestDate').datepicker({
        uiLibrary: 'bootstrap4'
    });
</script>

<script>
    window.onload = function () {
        //Toggle detials section
        var table = document.getElementById("MainTable");
        var detailsButtons = document.getElementsByClassName("DetailsButton");
        var detailsInfo = document.getElementsByClassName("DetailsInfo");

        var typeList = document.getElementById("TypeList");
        var x = document.getElementsByClassName("AlwaysVisible");
        var y = document.getElementsByClassName("DetailsInfo");

        console.log("[DEBUG] Details buttons count: " + detailsButtons.length);
        console.log("[DEBUG] Details tbody count: " + detailsInfo.length);

        document.onclick = function (event) {
            if (window.event) {
                //assign the element clicked to e (IE 6-8)
                e = event.srcElement;
            }
            else {
                //assign the element clicked to e
                e = e.target;
            }

            if (e.className && e.className.indexOf('DetailsButton') != -1) {
                //if the element has a class name, and that is 'someclass' then...
                let index = -1;
                for (let i = 0; i < detailsButtons.length; i++) {
                    if (detailsButtons[i] === e)
                        index = i;
                }
                detailsInfo[index].hidden = !(detailsInfo[index].hidden);
                //change background color of always visible
                if (detailsInfo[index].hidden == false) {
                    x[index].style.backgroundColor = "rgba(73,80,87, 0.3)";
                }
                else {
                    x[index].style.backgroundColor = "white";
                }
            }
        }
        //Transaction Type section
        console.log("[DEBUG] On load: x(rows) count " + x.length);
        console.log("[DEBUG] On load: y(rows) count " + y.length);

        //On document load -> title of transaction and hide if nedded
        //We use tbody.title to determine transaction type
        if (typeList.value == "Transaction") {
            console.log("[DEBUG] On load: showing only transactions (paragony)!")

            //Same length for x and y
            for (let i = 0; i < x.length; i++) {
                //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                if (x[i].title == "Invoice") {
                    x[i].hidden = true;
                }
            }
        }
        else if (typeList.value == "Invoice") {
            console.log("[DEBUG] On load: showing only invoices (faktury)!")
            //Same length for x and y
            for (let i = 0; i < x.length; i++) {
                //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                if (x[i].title == "Transaction") {
                    x[i].hidden = true;
                }
            }
        }
        //Do not need to hide anything -> everything visible on default
        else {
            console.log("[DEBUG] On load: showing all transactions!")
        }

        //Transaction type change section -> change hidden
        typeList.onchange = function (event) {
            var value = event.target.value;
            console.log("[DEBUG] NOW SHOWING ONLY TRANSACTIONS OF TYPE " + value);
            if (value == "Transaction") {
                //Show transactions
                for (let i = 0; i < x.length; i++) {
                    //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                    if (x[i].title == "Transaction") {
                        x[i].hidden = false;
                    }
                }
                //Hide invoices
                for (let i = 0; i < x.length; i++) {
                    //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                    if (x[i].title == "Invoice") {
                        x[i].hidden = true;
                        y[i].hidden = true;
                    }
                }
            }
            else if (value == "Transaction Invoice") {
                //Hide transactions
                for (let i = 0; i < x.length; i++) {
                    //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                    if (x[i].title == "Transaction") {
                        x[i].hidden = true;
                        y[i].hidden = true;
                    }
                }
                //Show invoices
                for (let i = 0; i < x.length; i++) {
                    //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                    if (x[i].title == "Invoice") {
                        x[i].hidden = false;
                    }
                }
            }
            else if (value == "All") {
                //Show transactions
                for (let i = 0; i < x.length; i++) {
                    //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                    if (x[i].title == "Transaction") {
                        x[i].hidden = false;
                    }
                }
                //Show invoices
                for (let i = 0; i < x.length; i++) {
                    //console.log("[DEBUG] Typeof transaction[" + i + "]: " + x[i].title);
                    if (x[i].title == "Invoice") {
                        x[i].hidden = false;
                    }
                }
            }
            else
                throw "Invalid transaction type selected!";
        }
    }

</script>
